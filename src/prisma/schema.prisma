generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TEACHER
  STUDENT
  SUPERADMIN
}

enum ExamType {
  DOCUMENT
  QCM
  CODE
}

enum ExamStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

enum ParticipationStatus {
  PENDING
  ACCEPTED
  DECLINED
  COMPLETED
}

enum SubmissionStatus {
  PENDING
  CORRECTED
  REVISED
}

model User {
  id                String    @id
  email             String    @unique
  name              String?
  profileCompleted  Boolean   @default(false)
  emailVerified     Boolean
  image             String?
  background        String?
  role              Role      @default(STUDENT)
  createdAt         DateTime
  updatedAt         DateTime
  website           String?
  preferredLanguage String?
  technologies      String[]
  passions          String[]
  sessions          Session[]
  accounts          Account[]

  createdExams   Exam[]
  participations ExamParticipation[]
  submissions    Submission[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Exam {
  id          String     @id @default(uuid())
  title       String
  description String?
  type        ExamType
  status      ExamStatus @default(DRAFT)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Fichiers et corrections
  examDocumentPath      String?
  teacherCorrectionPath String?
  aiCorrection          String?

  // Questions (uniquement pour QCM/CODE)
  questions Question[]

  // Relations
  creator      User                @relation(fields: [creatorId], references: [id])
  creatorId    String
  submissions  Submission[]
  participants ExamParticipation[]
  corrections  Correction[]
}

model ExamParticipation {
  id       String              @id @default(uuid())
  status   ParticipationStatus @default(PENDING)
  joinedAt DateTime?
  exam     Exam                @relation(fields: [examId], references: [id])
  examId   String
  user     User                @relation(fields: [userId], references: [id])
  userId   String

  @@unique([examId, userId])
}

model Question {
  id                  String   @id @default(uuid())
  text                String
  maxPoints           Float
  // Pour QCM
  choices             String[]
  correctAnswer       String[]
  explanation         String?
  feedbackCorrect     String?
  feedbackIncorrect   String?
  // Pour CODE
  programmingLanguage String?
  testCases           String[]

  exam   Exam     @relation(fields: [examId], references: [id])
  examId String
  Answer Answer[]
}

model Submission {
  id            String           @id @default(uuid())
  attemptNumber Int              @default(1)
  status        SubmissionStatus @default(PENDING)
  createdAt     DateTime         @default(now())

  // Pour DOCUMENT
  documentPath String?

  // Pour QCM/CODE
  answers Answer[]

  // Relations
  student    User        @relation(fields: [studentId], references: [id])
  studentId  String
  exam       Exam        @relation(fields: [examId], references: [id])
  examId     String
  correction Correction?

  @@unique([studentId, examId, attemptNumber])
}

model Answer {
  id           String     @id @default(uuid())
  content      String
  question     Question   @relation(fields: [questionId], references: [id])
  questionId   String
  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId String
}

model Correction {
  id          String  @id @default(uuid())
  aiFeedback  String
  autoScore   Float
  manualScore Float?
  finalScore  Float
  improvement String?
  isRevised   Boolean @default(false)
  comments    String?

  evaluation String?

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt()
  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId String     @unique
  exam         Exam       @relation(fields: [examId], references: [id])
  examId       String
}
