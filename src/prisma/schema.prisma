// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TEACHER
  STUDENT
  SUPERADMIN
}

enum ExamType {
  DOCUMENT
  QCM
  CODE
}

enum ExamStatus {
  PENDING // En attente de la date de début
  ACTIVE // En cours
  COMPLETED // Terminé (date de fin dépassée)
}

enum SubmissionStatus {
  PENDING // En attente de correction
  CORRECTED // Corrigé
  REVISED // Révisé après correction
}

enum ParticipantStatus {
  PENDING // En attente de réponse
  ACCEPTED // A accepté l'invitation
  DECLINED // A refusé l'invitation
  COMPLETED // A terminé l'examen
}

model User {
  id                 String            @id
  email              String            @unique
  name               String?
  profileCompleted   Boolean           @default(false)
  emailVerified      Boolean
  image              String?
  background         String?
  role               Role              @default(STUDENT)
  createdAt          DateTime
  updatedAt          DateTime
  website            String?
  preferredLanguage  String?
  technologies       String[]
  passions           String[]
  sessions           Session[]
  accounts           Account[]
  exams              Exam[]            @relation("ExamsCreated")
  answers            Answer[]
  grades             Grade[]
  Correction         Correction[]
  participatingExams ExamParticipant[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Exam {
  id          String     @id @default(uuid())
  title       String
  description String?
  filePath    String?
  format      String?
  type        ExamType
  maxAttempts Int        @default(1)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  startDate   DateTime?
  endDate     DateTime?
  status      ExamStatus @default(PENDING)
  fileCorrection String?

  questions    Question[]        @relation("ExamQuestions")
  createdBy    User              @relation("ExamsCreated", fields: [createdById], references: [id])
  createdById  String
  answers      Answer[]          @relation("ExamAnswers")
  grades       Grade[]           @relation("ExamGrades")
  participants ExamParticipant[]
}

model Question {
  id                  String           @id @default(uuid())
  text                String
  maxPoints           Float
  choices             String[] // Pour les QCM : tableau des choix possibles
  programmingLanguage String? // Pour les questions de Code : langage à utiliser
  answer              String?          @db.VarChar(5000)
  exam                Exam             @relation("ExamQuestions", fields: [examId], references: [id], onDelete: Cascade)
  examId              String
  answers             QuestionAnswer[]

  @@index([examId])
}

model Answer {
  id            String           @id @default(uuid())
  filePath      String
  attemptNumber Int              @default(1)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  status        SubmissionStatus @default(PENDING)

  // Relations existantes
  student   User   @relation(fields: [studentId], references: [id])
  studentId String
  exam      Exam   @relation("ExamAnswers", fields: [examId], references: [id], onDelete: Cascade)
  examId    String

  // Nouvelle relation pour les réponses aux questions
  questionAnswers QuestionAnswer[]

  corrections Correction[] @relation("AnswerCorrections")
  grade       Grade?

  @@unique([studentId, examId, attemptNumber])
}

// Nouveau modèle pour stocker les réponses aux questions
model QuestionAnswer {
  id        String   @id @default(uuid())
  content   String   @db.VarChar(5000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answer     Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId   String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  @@unique([answerId, questionId])
}

model Correction {
  id            String   @id @default(uuid())
  aiFeedback    String
  autoScore     Float
  manualScore   Float?
  improvement   String?
  correctedBy   User?    @relation(fields: [correctedById], references: [id])
  correctedById String?
  createdAt     DateTime @default(now())

  answer   Answer  @relation("AnswerCorrections", fields: [answerId], references: [id], onDelete: Cascade)
  answerId String
  grades   Grade[]
}

model Grade {
  id         String  @id @default(uuid())
  finalScore Float
  isRevised  Boolean @default(false)
  comments   String?

  student      User       @relation(fields: [studentId], references: [id])
  studentId    String
  exam         Exam       @relation("ExamGrades", fields: [examId], references: [id], onDelete: Cascade)
  examId       String
  correction   Correction @relation(fields: [correctionId], references: [id], onDelete: Cascade)
  correctionId String
  answer       Answer     @relation(fields: [answerId], references: [id])
  answerId     String     @unique // Ajout de @unique pour répondre à l'erreur

  @@unique([studentId, examId])
}

model ExamParticipant {
  id       String            @id @default(uuid())
  examId   String
  userId   String
  status   ParticipantStatus @default(PENDING)
  joinedAt DateTime          @default(now())
  exam     Exam              @relation(fields: [examId], references: [id], onDelete: Cascade)
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([examId, userId])
}
