// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TEACHER
  STUDENT
  SUPERADMIN
}

enum ExamType {
  DOCUMENT
  QCM
  CODE
}

model User {
  id            String       @id
  email         String       @unique
  name          String?
  profileCompleted Boolean  @default(false)
  emailVerified Boolean
  image         String?
  background    String?
  role          Role         @default(STUDENT)
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  exams         Exam[]       @relation("ExamsCreated")
  answers       Answer[]
  grades        Grade[]
  Correction    Correction[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Exam {
  id          String    @id @default(uuid())
  title       String
  description String?
  filePath    String
  format      String
  type        ExamType
  maxAttempts Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deadline    DateTime?

  questions   Question[]
  createdBy   User       @relation("ExamsCreated", fields: [createdById], references: [id])
  createdById String
  answers     Answer[]
  grades      Grade[]
}

model Question {
  id           String @id @default(uuid())
  text         String
  correctionAi String
  maxPoints    Float
  exam         Exam   @relation(fields: [examId], references: [id])
  examId       String

  @@index([examId])
}

model Answer {
  id            String   @id @default(uuid())
  filePath      String
  attemptNumber Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  student   User   @relation(fields: [studentId], references: [id])
  studentId String
  exam      Exam   @relation(fields: [examId], references: [id])
  examId    String

  corrections Correction[]
  grade       Grade?       @relation(fields: [gradeId], references: [id])
  gradeId     String?

  @@unique([studentId, examId, attemptNumber])
}

model Correction {
  id            String   @id @default(uuid())
  aiFeedback    String
  autoScore     Float
  manualScore   Float?
  improvement   String?
  correctedBy   User?    @relation(fields: [correctedById], references: [id])
  correctedById String?
  createdAt     DateTime @default(now())

  answer   Answer  @relation(fields: [answerId], references: [id])
  answerId String
  grades   Grade[]
}

model Grade {
  id         String  @id @default(uuid())
  finalScore Float
  isRevised  Boolean @default(false)
  comments   String?

  student      User       @relation(fields: [studentId], references: [id])
  studentId    String
  exam         Exam       @relation(fields: [examId], references: [id])
  examId       String
  correction   Correction @relation(fields: [correctionId], references: [id])
  correctionId String
  Answer       Answer[]

  @@unique([studentId, examId])
}
